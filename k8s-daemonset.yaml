apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: KubeDiskGuard
  namespace: kube-system
  labels:
    app: KubeDiskGuard
spec:
  selector:
    matchLabels:
      app: KubeDiskGuard
  template:
    metadata:
      labels:
        app: KubeDiskGuard
    spec:
      hostPID: true
      containers:
      - name: KubeDiskGuard
        image: registry.kbsonlong.com/iops-limit-service:latest
        imagePullPolicy: Always
        securityContext:
          privileged: true
          runAsUser: 0
          runAsGroup: 0
        env:
        - name: CONTAINER_IOPS_LIMIT
          value: "500"
        - name: DATA_MOUNT
          value: "/data"
        - name: EXCLUDE_KEYWORDS
          value: "pause,istio-proxy,apisix"
        - name: EXCLUDE_NAMESPACES
          value: "kube-system,kruise-system,psmdb,istio-system,koordinator-system,kyverno"
        - name: CONTAINER_RUNTIME
          value: "docker"
        - name: CGROUP_VERSION
          value: "v1"
        - name: CHECK_INTERVAL
          value: "30"
        - name: KUBELET_HOST
          value: "localhost"
        - name: KUBELET_PORT
          value: "10250"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: cgroup
          mountPath: /sys/fs/cgroup
        - name: socket
          mountPath: /run/containerd/containerd.sock
        - name: proc
          mountPath: /proc
        - name: dev
          mountPath: /dev
        - name: data
          mountPath: /data
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep KubeDiskGuard | grep -v grep"
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: cgroup
        hostPath:
          path: /sys/fs/cgroup
      # 根据运行时设置 `socket` 地址
      - name: socket
        hostPath:
          path: /var/run/docker.sock
      - name: proc
        hostPath:
          path: /proc
      - name: dev
        hostPath:
          path: /dev
      - name: data
        hostPath:
          path: /data
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      nodeSelector:
        ip: 10.90.210.153
      imagePullSecrets:
      - name: zj-repo-sg
      serviceAccount: KubeDiskGuard
      serviceAccountName: KubeDiskGuard
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: KubeDiskGuard
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: KubeDiskGuard
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: KubeDiskGuard
subjects:
- kind: ServiceAccount
  name: KubeDiskGuard
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: KubeDiskGuard
  apiGroup: rbac.authorization.k8s.io 