apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: io-limit-service
  namespace: kube-system
  labels:
    app: io-limit-service
spec:
  selector:
    matchLabels:
      app: io-limit-service
  template:
    metadata:
      labels:
        app: io-limit-service
    spec:
      serviceAccountName: io-limit-service
      containers:
      - name: io-limit-service
        image: your-registry/io-limit-service:latest
        env:
        # 基础配置
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: CONTAINER_READ_IOPS_LIMIT
          value: "500"
        - name: CONTAINER_WRITE_IOPS_LIMIT
          value: "500"
        - name: CONTAINER_READ_BPS_LIMIT
          value: "1048576"  # 1MB/s
        - name: CONTAINER_WRITE_BPS_LIMIT
          value: "1048576"  # 1MB/s
        
        # 过滤配置
        - name: EXCLUDE_KEYWORDS
          value: "pause,istio-proxy,psmdb,kube-system,koordinator,apisix"
        - name: EXCLUDE_NAMESPACES
          value: "kube-system,monitoring"
        - name: EXCLUDE_LABEL_SELECTOR
          value: "app=system,env in (prod,staging),!debug"
        
        # 智能限速配置
        - name: SMART_LIMIT_ENABLED
          value: "true"
        - name: SMART_LIMIT_MONITOR_INTERVAL
          value: "60"  # 60秒监控间隔
        - name: SMART_LIMIT_HISTORY_WINDOW
          value: "10"  # 10分钟历史数据窗口
        - name: SMART_LIMIT_HIGH_IO_THRESHOLD
          value: "1000"  # 1000 IOPS阈值
        - name: SMART_LIMIT_HIGH_BPS_THRESHOLD
          value: "1048576"  # 1MB/s BPS阈值
        - name: SMART_LIMIT_AUTO_IOPS
          value: "500"  # 最小IOPS限速值
        - name: SMART_LIMIT_AUTO_BPS
          value: "524288"  # 512KB/s 最小BPS限速值
        - name: SMART_LIMIT_ANNOTATION_PREFIX
          value: "io-limit"
        
        # kubelet API配置
        - name: KUBELET_HOST
          value: "localhost"
        - name: KUBELET_PORT
          value: "10250"
        - name: KUBELET_SKIP_VERIFY
          value: "true"
        - name: SMART_LIMIT_USE_KUBELET_API
          value: "true"  # 启用kubelet API获取IO数据
        - name: KUBELET_TOKEN_PATH
          value: "/var/run/secrets/kubernetes.io/serviceaccount/token"
        - name: KUBELET_CA_PATH
          value: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        
        # 运行时配置
        - name: CONTAINER_RUNTIME
          value: "auto"
        - name: CGROUP_VERSION
          value: "auto"
        
        securityContext:
          privileged: true
          runAsUser: 0
          runAsGroup: 0
        
        volumeMounts:
        - name: cgroup
          mountPath: /sys/fs/cgroup
          readOnly: true
        - name: data
          mountPath: /data
        - name: runtime-sock
          mountPath: /run/containerd/containerd.sock
        - name: docker-sock
          mountPath: /var/run/docker.sock
        - name: kubelet-ca
          mountPath: /etc/kubernetes/pki/kubelet-ca.pem
          subPath: kubelet-ca.pem
          readOnly: true
        - name: kubelet-token
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount/token
          subPath: token
          readOnly: true
        
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      volumes:
      - name: cgroup
        hostPath:
          path: /sys/fs/cgroup
          type: Directory
      - name: data
        hostPath:
          path: /data
          type: Directory
      - name: runtime-sock
        hostPath:
          path: /run/containerd/containerd.sock
          type: Socket
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      - name: kubelet-ca
        hostPath:
          path: /etc/kubernetes/pki/kubelet-ca.pem
          type: File
      - name: kubelet-token
        hostPath:
          path: /var/run/secrets/kubernetes.io/serviceaccount/token
          type: File
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: io-limit-service
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: io-limit-service
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: io-limit-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: io-limit-service
subjects:
- kind: ServiceAccount
  name: io-limit-service
  namespace: kube-system 